buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.14.3"
        classpath "gradle.plugin.org.flywaydb:gradle-plugin-publishing:7.11.0"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.14.3"

    }
}

plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'com.belong'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

apply plugin: 'docker'
apply plugin: 'docker-compose'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'docker-compose'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'


    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'

}

flyway {
    url = 'jdbc:postgresql://localhost:5432/postgres'
    driver = 'org.postgresql.Driver'
    locations = ["filesystem:$rootProject.projectDir/src/test/resources/db/schema"]
    user = 'postgres'
    password = 'postgres'
}

test {
    filter {

        includeTestsMatching "*unit*"
        includeTestsMatching "*component*"
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

task integrationTest(type: Test) {
    filter {

        includeTestsMatching "*blackbox*"
    }
    useJUnitPlatform()
}
bootRun {
    dependsOn += ['flywayClean', 'flywayMigrate']
}
